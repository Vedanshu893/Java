/**
 * Definition for singly-linked list.
 * class ListNode {
 *     public int val;
 *     public ListNode next;
 *     ListNode(int x) { val = x; next = null; }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode a) {
        if(a==null || a.next==null) return null;

        ListNode fast=a;
        ListNode slow=a;
        ListNode intersection=null;
        while(fast!=null && fast.next!=null){
           
            fast=fast.next.next;
            slow=slow.next;
            if(slow==fast){
                intersection=slow;
                break;              //breaking the loop after getting the intersection point          
            }                       //in the cycle
        }

        if(intersection!=null){
            slow=a;
            while(slow!=intersection){              //traversing again from head and intersection
                slow=slow.next;                     //when head and intersection are equal thats the starting
                intersection=intersection.next;     //point of the cycle
            }
            return slow;
        }
        return null;
    }
}
