/**
 * Definition for singly-linked list.
 * class ListNode {
 *     public int val;
 *     public ListNode next;
 *     ListNode(int x) { val = x; next = null; }
 * }
 */
public class Solution {

    public static ListNode getfirstmid(ListNode A){
        ListNode slow = A;
        ListNode fast = A;
    

        if(slow == null || slow.next == null){
            return A;
        }

        while (fast.next != null && fast.next.next != null){   // "OR" CONDITION IS NOT WORKING
            slow = slow.next;
            fast = fast.next.next;
        }

        return slow;

    }

    public ListNode sortList(ListNode A) {

        if(A == null || A.next == null){
            return A;
        }

        ListNode mid = getfirstmid(A);  // Getting middle node 
        
        // Breaking in two parts
        
        ListNode h2 = mid.next;
        mid.next = null;

        ListNode h1 = sortList(A);
        h2 = sortList(h2);

        return MergeL(h1,h2);
        
    }

    public static ListNode MergeL(ListNode t1, ListNode t2){

        if(t1==null){return t2;}
        if(t2==null){return t1;}
        
        ListNode head,t;
        if(t1.val<t2.val)
          {
             head=t1;
             t=t1;
             t1=t1.next;
          }
        else
          {
              head=t2;
              t=t2;
              t2=t2.next;
          }
        while(t1!=null && t2!=null)
          {
               if(t1.val<t2.val)
               {
                   t.next=t1;
                   t1=t1.next;
                   t=t.next;
               }
               else
               {
                   t.next=t2;
                   t2=t2.next;
                   t=t.next;
               }
          }
        if(t1!=null)
          {
              t.next=t1;
          }
        if(t2!=null)
          {
              t.next=t2;
          }
        return head;
    }

}
