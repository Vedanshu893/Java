public class Solution {
    int mod = 1000000007;
    long inversionCount = 0l;
    public int solve(int[] A) {
        int n = A.length;
        mergeSort(A,0,n-1);
        return (int) inversionCount;
    }
    public void mergeSort(int[] A, int s, int e){
        if(s >= e) return;
        int mid = (s+e)/2;
        mergeSort(A,s,mid);
        mergeSort(A,mid+1,e);
        merge(A,s,mid,e);
    }

    public void merge(int[] A, int s, int mid, int e){
        int n1 = mid - s + 1; //number of elements in array1
        int n2 = e - mid;//number of elements in array2
        int A1[] = new int[n1];
        int A2[] = new int[n2];
        int index = 0;

        //filling A1 and A2
        for(int i = s; i <= mid; i++)
            A1[index++] = A[i];

        index = 0;
        for(int i = mid+1; i <= e; i++)
            A2[index++] = A[i];
       
        int i = 0, j = 0; // i and j referncing A1 and A2 array respectively
        index = s; // important

        while(i < n1 && j < n2){
            if(A1[i] <= A2[j]) // equals to condition for equal elements
                A[index++] = A1[i++];
            else{
                inversionCount = (inversionCount + (A1.length - i))%mod; //here fulfilling problem statement condition
                A[index++] = A2[j++];
            }
        }
        //if some elements still remaining after traversal
        if(i < n1){
            while(i < n1){
                A[index++] = A1[i++];
            }
        }else{
            while(j < n2){
                A[index++] = A2[j++];
            }
        }
    }
}
